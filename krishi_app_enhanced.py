import streamlit as st
import requests
import json
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from geopy.geocoders import Nominatim
import time
import random

# Page configuration
st.set_page_config(
    page_title="Krishi Saaransh - Smart Farmer Assistant",
    page_icon="ЁЯМ╛",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Enhanced Custom CSS with better styling and mobile responsiveness
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(135deg, #FF9933 0%, #FFFFFF 50%, #138808 100%);
        padding: 2.5rem;
        border-radius: 15px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
        border: 2px solid #FFD700;
    }
    
    .main-header h1 {
        color: #2E8B57;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        margin-bottom: 0.5rem;
    }
    
    .main-header h3 {
        color: #1e3c1e;
        margin-top: 0.5rem;
    }
    
    .feature-card {
        background: linear-gradient(135deg, #1e3c1e 0%, #2e4f2e 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid #138808;
        margin: 1rem 0;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        transition: transform 0.3s ease;
    }
    
    .feature-card:hover {
        transform: translateY(-2px);
    }
    
    .weather-card {
        background: linear-gradient(135deg, #1e2b3e 0%, #2f3e4f 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        margin: 1rem 0;
        border: 2px solid #4169E1;
    }
    
    .price-card {
        background: linear-gradient(135deg, #2e2e2e 0%, #3e3e3e 100%);
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.8rem 0;
        border-left: 4px solid #FF9933;
        transition: all 0.3s ease;
    }
    
    .price-card:hover {
        border-left: 8px solid #FF9933;
        transform: translateX(5px);
    }
    
    .scheme-card {
        background: linear-gradient(135deg, #2a2a40 0%, #3a3a50 100%);
        padding: 1.2rem;
        border-radius: 12px;
        margin: 0.8rem 0;
        border-left: 4px solid #4169E1;
        transition: all 0.3s ease;
    }
    
    .scheme-card:hover {
        border-left: 8px solid #4169E1;
        transform: translateX(5px);
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 12px;
        margin: 0.8rem 0;
        animation: fadeIn 0.5s ease-in;
    }
    
    .user-message {
        background: linear-gradient(135deg, #DCF8C6 0%, #C8E6C9 100%);
        border-left: 4px solid #25D366;
        margin-left: 2rem;
    }
    
    .bot-message {
        background: linear-gradient(135deg, #F1F1F1 0%, #E8E8E8 100%);
        border-left: 4px solid #128C7E;
        margin-right: 2rem;
    }
    
    .alert-card {
        background: linear-gradient(135deg, #FF6B6B 0%, #FF8E53 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
        border-left: 4px solid #FF0000;
    }
    
    .success-card {
        background: linear-gradient(135deg, #4ECDC4 0%, #44A08D 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
        border-left: 4px solid #00FF00;
    }
    
    .info-card {
        background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 1rem 0;
        border-left: 4px solid #0000FF;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
        border-top: 3px solid #138808;
    }
    
    .quick-action-btn {
        background: linear-gradient(45deg, #FF9933, #FFB366);
        border: none;
        color: white;
        padding: 0.7rem 1rem;
        border-radius: 25px;
        margin: 0.3rem;
        transition: all 0.3s ease;
        cursor: pointer;
    }
    
    .quick-action-btn:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .stTabs [data-baseweb="tab-list"] {
        gap: 24px;
    }
    
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
        background-color: #f0f0f0;
        border-radius: 10px;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(45deg, #FF9933, #138808);
        color: white;
    }
    
    @media (max-width: 768px) {
        .main-header {
            padding: 1.5rem;
            font-size: 0.9rem;
        }
        .feature-card, .weather-card {
            padding: 1rem;
        }
        .user-message {
            margin-left: 0.5rem;
        }
        .bot-message {
            margin-right: 0.5rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state with better defaults
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'selected_language' not in st.session_state:
    st.session_state.selected_language = 'English'  # Default to English
if 'user_location' not in st.session_state:
    st.session_state.user_location = {'city': 'Delhi', 'state': 'Delhi'}
if 'user_profile' not in st.session_state:
    st.session_state.user_profile = {
        'name': '',
        'farm_size': 1.0,
        'primary_crops': [],
        'farming_experience': 'Beginner'
    }
if 'notifications' not in st.session_state:
    st.session_state.notifications = []
if 'saved_data' not in st.session_state:
    st.session_state.saved_data = {
        'favorite_crops': [],
        'bookmarked_schemes': [],
        'price_alerts': []
    }

# Enhanced Language translations with more languages
TRANSLATIONS = {
    'English': {
        'welcome': 'Welcome',
        'app_name': 'Krishi Saaransh - Smart Farmer Assistant',
        'description': 'AI-Powered Platform for Indian Farmers',
        'weather': 'Weather Forecast',
        'crop_planning': 'Crop Planning',
        'market_prices': 'Market Prices',
        'govt_schemes': 'Government Schemes',
        'ai_assistant': 'AI Assistant',
        'profile': 'Farmer Profile',
        'notifications': 'Notifications',
        'location': 'Location',
        'temperature': 'Temperature',
        'humidity': 'Humidity',
        'rainfall': 'Rainfall',
        'crop_recommendations': 'Crop Recommendations',
        'ask_question': 'Ask your farming question here...',
        'send': 'Send Message',
        'quick_questions': 'Quick Questions',
        'weather_info': 'Weather Info',
        'crop_advice': 'Crop Advice',
        'price_check': 'Price Check',
        'scheme_info': 'Scheme Info',
        'farming_tips': 'Farming Tips',
        'pest_control': 'Pest Control'
    },
    'Hindi': {
        'welcome': 'рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
        'app_name': 'рдХреГрд╖рд┐ рд╕рд╛рд░рд╛рдВрд╢ - рд╕реНрдорд╛рд░реНрдЯ рдХрд┐рд╕рд╛рди рд╕рд╣рд╛рдпрдХ',
        'description': 'рднрд╛рд░рддреАрдп рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЗ рд▓рд┐рдП AI-рд╕рдВрдЪрд╛рд▓рд┐рдд рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо',
        'weather': 'рдореМрд╕рдо рдкреВрд░реНрд╡рд╛рдиреБрдорд╛рди',
        'crop_planning': 'рдлрд╕рд▓ рдпреЛрдЬрдирд╛',
        'market_prices': 'рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп',
        'govt_schemes': 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ',
        'ai_assistant': 'AI рд╕рд╣рд╛рдпрдХ',
        'profile': 'рдХрд┐рд╕рд╛рди рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓',
        'notifications': 'рд╕реВрдЪрдирд╛рдПрдВ',
        'location': 'рд╕реНрдерд╛рди',
        'temperature': 'рддрд╛рдкрдорд╛рди',
        'humidity': 'рдЖрд░реНрджреНрд░рддрд╛',
        'rainfall': 'рд╡рд░реНрд╖рд╛',
        'crop_recommendations': 'рдлрд╕рд▓ рд╕реБрдЭрд╛рд╡',
        'ask_question': 'рдЕрдкрдирд╛ рдХреГрд╖рд┐ рдкреНрд░рд╢реНрди рдпрд╣рд╛рдБ рдкреВрдЫреЗрдВ...',
        'send': 'рд╕рдВрджреЗрд╢ рднреЗрдЬреЗрдВ',
        'quick_questions': 'рддреНрд╡рд░рд┐рдд рдкреНрд░рд╢реНрди',
        'weather_info': 'рдореМрд╕рдо рдЬрд╛рдирдХрд╛рд░реА',
        'crop_advice': 'рдлрд╕рд▓ рд╕рд▓рд╛рд╣',
        'price_check': 'рдореВрд▓реНрдп рдЬрд╛рдВрдЪ',
        'scheme_info': 'рдпреЛрдЬрдирд╛ рдЬрд╛рдирдХрд╛рд░реА',
        'farming_tips': 'рдХреГрд╖рд┐ рдЯрд┐рдкреНрд╕',
        'pest_control': 'рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг'
    },
    'Tamil': {
        'welcome': 'ро╡рогроХрпНроХроорпН',
        'app_name': 'роХро┐ро░рпБро╖ро┐ роЪро╛ро░ройрпНро╖рпН - ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛ропро┐ роЙродро╡ро┐ропро╛ро│ро░рпН',
        'description': 'роЗроирпНродро┐роп ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХро╛рой AI-роЗропроЩрпНроХрпБроорпН родро│роорпН',
        'weather': 'ро╡ро╛ройро┐ро▓рпИ роорпБройрпНройро▒ро┐ро╡ро┐рокрпНрокрпБ',
        'crop_planning': 'рокропро┐ро░рпН родро┐роЯрпНроЯрооро┐роЯро▓рпН',
        'market_prices': 'роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпН',
        'govt_schemes': 'роЕро░роЪрпБ родро┐роЯрпНроЯроЩрпНроХро│рпН',
        'ai_assistant': 'AI роЙродро╡ро┐ропро╛ро│ро░рпН',
        'profile': 'ро╡ро┐ро╡роЪро╛ропро┐ роЪрпБропро╡ро┐ро╡ро░роорпН',
        'notifications': 'роЕро▒ро┐ро╡ро┐рокрпНрокрпБроХро│рпН',
        'location': 'роЗроЯроорпН',
        'temperature': 'ро╡рпЖрокрпНрокроиро┐ро▓рпИ',
        'humidity': 'роИро░рокрпНрокродроорпН',
        'rainfall': 'рооро┤рпИрокрпНрокрпКро┤ро┐ро╡рпБ',
        'crop_recommendations': 'рокропро┐ро░рпН рокро░ро┐роирпНродрпБро░рпИроХро│рпН',
        'ask_question': 'роЙроЩрпНроХро│рпН ро╡рпЗро│ро╛рогрпН роХрпЗро│рпНро╡ро┐ропрпИ роЗроЩрпНроХрпЗ роХрпЗро│рпБроЩрпНроХро│рпН...',
        'send': 'роЪрпЖропрпНродро┐ роЕройрпБрокрпНрокрпБ',
        'quick_questions': 'ро╡ро┐ро░рпИро╡рпБ роХрпЗро│рпНро╡ро┐роХро│рпН',
        'weather_info': 'ро╡ро╛ройро┐ро▓рпИ родроХро╡ро▓рпН',
        'crop_advice': 'рокропро┐ро░рпН роЖро▓рпЛроЪройрпИ',
        'price_check': 'ро╡ро┐ро▓рпИ роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ',
        'scheme_info': 'родро┐роЯрпНроЯ родроХро╡ро▓рпН',
        'farming_tips': 'ро╡рпЗро│ро╛рогрпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН',
        'pest_control': 'рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ'
    },
    'Telugu': {
        'welcome': 'р░╕р▒Нр░╡р░╛р░Чр░др░В',
        'app_name': 'р░Хр▒Гр░╖р░┐ р░╕р░╛р░░р░╛р░Вр░╢р▒Н - р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░░р▒Ир░др▒Б р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б',
        'description': 'р░нр░╛р░░р░др▒Ар░п р░░р▒Ир░др▒Бр░▓ р░Хр▒Лр░╕р░В AI-р░Жр░зр░╛р░░р░┐р░д р░кр▒Нр░▓р░╛р░Яр▒НтАМр░лр░╛р░░р░В',
        'weather': 'р░╡р░╛р░др░╛р░╡р░░р░г р░╕р▒Вр░Ър░и',
        'crop_planning': 'р░кр░Вр░Я р░кр▒Нр░░р░гр░╛р░│р░┐р░Х',
        'market_prices': 'р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р▒Б',
        'govt_schemes': 'р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Хр░╛р░▓р▒Б',
        'ai_assistant': 'AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр▒Б',
        'profile': 'р░░р▒Ир░др▒Б р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒Н',
        'notifications': 'р░ир▒Лр░Яр░┐р░лр░┐р░Хр▒Зр░╖р░ир▒Нр░▓р▒Б',
        'location': 'р░╕р▒Нр░ер░╛р░ир░В',
        'temperature': 'р░Йр░╖р▒Нр░гр▒Лр░Чр▒Нр░░р░д',
        'humidity': 'р░др▒Зр░о',
        'rainfall': 'р░╡р░░р▒Нр░╖р░кр░╛р░др░В',
        'crop_recommendations': 'р░кр░Вр░Я р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б',
        'ask_question': 'р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Ер░бр▒Бр░Чр░Вр░бр░┐...',
        'send': 'р░╕р░Вр░жр▒Зр░╢р░В р░кр░Вр░кр░Вр░бр░┐',
        'quick_questions': 'р░др▒Нр░╡р░░р░┐р░д р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б',
        'weather_info': 'р░╡р░╛р░др░╛р░╡р░░р░г р░╕р░ор░╛р░Ър░╛р░░р░В',
        'crop_advice': 'р░кр░Вр░Я р░╕р░▓р░╣р░╛',
        'price_check': 'р░зр░░ р░др░ир░┐р░Цр▒А',
        'scheme_info': 'р░кр░ер░Хр░В р░╕р░ор░╛р░Ър░╛р░░р░В',
        'farming_tips': 'р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ър░┐р░Яр▒Нр░Хр░╛р░▓р▒Б',
        'pest_control': 'р░Ър▒Ар░бр░кр▒Ар░бр░▓ р░ир░┐р░пр░Вр░др▒Нр░░р░г'
    },
    'Malayalam': {
        'welcome': 'р┤╕р╡Нр┤╡р┤╛р┤Чр┤др┤В',
        'app_name': 'р┤Хр╡Гр┤╖р┤┐ р┤╕р┤╛р┤░р┤╛р┤Вр┤╢р╡Н - р┤╕р╡Нр┤ор┤╛р╡╝р┤Яр╡Нр┤Яр╡Н р┤Хр╡╝р┤╖р┤Х р┤╕р┤╣р┤╛р┤пр┤┐',
        'description': 'р┤Зр┤ир╡Нр┤др╡Нр┤пр╡╗ р┤Хр╡╝р┤╖р┤Хр╡╝р┤Хр╡Нр┤Хр╡Бр┤│р╡Нр┤│ AI-р┤кр┤╡р╡Зр╡╝р┤бр╡Н р┤кр╡Нр┤▓р┤╛р┤▒р╡Нр┤▒р╡Нр┤лр╡Лр┤В',
        'weather': 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤кр╡Нр┤░р┤╡р┤Ър┤ир┤В',
        'crop_planning': 'р┤╡р┤┐р┤│ р┤Жр┤╕р╡Вр┤др╡Нр┤░р┤гр┤В',
        'market_prices': 'р┤ор┤╛р╡╝р┤Хр╡Нр┤Хр┤▒р╡Нр┤▒р╡Н р┤╡р┤┐р┤▓р┤Хр╡╛',
        'govt_schemes': 'р┤╕р╡╝р┤Хр╡Нр┤Хр┤╛р╡╝ р┤кр┤жр╡Нр┤зр┤др┤┐р┤Хр╡╛',
        'ai_assistant': 'AI р┤╕р┤╣р┤╛р┤пр┤┐',
        'profile': 'р┤Хр╡╝р┤╖р┤Х р┤кр╡Нр┤░р╡Кр┤лр╡Ир╡╜',
        'notifications': 'р┤Ер┤▒р┤┐р┤пр┤┐р┤кр╡Нр┤кр╡Бр┤Хр╡╛',
        'location': 'р┤╕р╡Нр┤ер┤▓р┤В',
        'temperature': 'р┤др┤╛р┤кр┤ир┤┐р┤▓',
        'humidity': 'р┤Жр╡╝р┤жр╡Нр┤░р┤д',
        'rainfall': 'р┤ор┤┤',
        'crop_recommendations': 'р┤╡р┤┐р┤│ р┤╢р╡Бр┤кр┤╛р╡╝р┤╢р┤Хр╡╛',
        'ask_question': 'р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж р┤Хр╡Гр┤╖р┤┐ р┤Ър╡Лр┤жр╡Нр┤пр┤В р┤Зр┤╡р┤┐р┤Яр╡Ж р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...',
        'send': 'р┤╕р┤ир╡Нр┤жр╡Зр┤╢р┤В р┤Ер┤пр┤пр╡Нр┤Хр╡Нр┤Хр╡Бр┤Х',
        'quick_questions': 'р┤кр╡Жр┤Яр╡Нр┤Яр╡Жр┤ир╡Нр┤ир╡Бр┤│р╡Нр┤│ р┤Ър╡Лр┤жр╡Нр┤пр┤Щр╡Нр┤Щр╡╛',
        'weather_info': 'р┤Хр┤╛р┤▓р┤╛р┤╡р┤╕р╡Нр┤е р┤╡р┤┐р┤╡р┤░р┤В',
        'crop_advice': 'р┤╡р┤┐р┤│ р┤Йр┤кр┤жр╡Зр┤╢р┤В',
        'price_check': 'р┤╡р┤┐р┤▓ р┤кр┤░р┤┐р┤╢р╡Лр┤зр┤и',
        'scheme_info': 'р┤кр┤жр╡Нр┤зр┤др┤┐ р┤╡р┤┐р┤╡р┤░р┤В',
        'farming_tips': 'р┤Хр╡Гр┤╖р┤┐ р┤ир╡Бр┤▒р╡Бр┤Щр╡Нр┤Щр╡Бр┤Хр╡╛',
        'pest_control': 'р┤Хр╡Ар┤Я р┤ир┤┐р┤пр┤ир╡Нр┤др╡Нр┤░р┤гр┤В'
    },
    'Punjabi': {
        'welcome': 'ри╕рйБриЖриЧрид ри╣рйИ',
        'app_name': 'риХрйНри░ри┐ри╕ри╝рйА ри╕ри╛ри░ри╛риВри╕ри╝ - ри╕риори╛ри░риЯ риХри┐ри╕ри╛рии ри╕ри╣ри╛риЗриХ',
        'description': 'ринри╛ри░ридрйА риХри┐ри╕ри╛риири╛риВ ри▓риИ AI-ри╕рй░риЪри╛ри▓ри┐рид рикри▓рйЗриЯрилри╛ри░рио',
        'weather': 'риорйМри╕рио рикрйВри░ри╡ риЕриирйБриори╛рии',
        'crop_planning': 'рилри╕ри▓ рипрйЛриЬриири╛',
        'market_prices': 'риори╛ри░риХри┐риЯ риХрйАриоридри╛риВ',
        'govt_schemes': 'ри╕ри░риХри╛ри░рйА рипрйЛриЬриири╛ри╡ри╛риВ',
        'ai_assistant': 'AI ри╕ри╣ри╛риЗриХ',
        'profile': 'риХри┐ри╕ри╛рии рикрйНри░рйЛрилри╛риИри▓',
        'notifications': 'ри╕рйВриЪриири╛ри╡ри╛риВ',
        'location': 'ри╕риери╛рии',
        'temperature': 'ридри╛рикриори╛рии',
        'humidity': 'риириорйА',
        'rainfall': 'римри╛ри░ри┐ри╕ри╝',
        'crop_recommendations': 'рилри╕ри▓ ри╕ри┐рилри╛ри░ри╕ри╝ри╛риВ',
        'ask_question': 'риЖрикригри╛ риЦрйЗридрйАримри╛рйЬрйА ри╕ри╡ри╛ри▓ риЗрй▒риерйЗ рикрйБрй▒риЫрйЛ...',
        'send': 'ри╕рйБриирйЗри╣ри╛ ринрйЗриЬрйЛ',
        'quick_questions': 'ридрйБри░рй░рид ри╕ри╡ри╛ри▓',
        'weather_info': 'риорйМри╕рио риЬри╛ригриХри╛ри░рйА',
        'crop_advice': 'рилри╕ри▓ ри╕ри▓ри╛ри╣',
        'price_check': 'риХрйАриорид риЬри╛риВриЪ',
        'scheme_info': 'рипрйЛриЬриири╛ риЬри╛ригриХри╛ри░рйА',
        'farming_tips': 'риЦрйЗридрйАримри╛рйЬрйА риЯри┐рикри╕',
        'pest_control': 'риХрйАрйЬрйЗ риири┐рипрй░ридри░риг'
    }
}

def get_text(key):
    """Get translated text based on selected language"""
    return TRANSLATIONS[st.session_state.selected_language].get(key, key)

# Enhanced sample data functions
def get_weather_data(city):
    """Enhanced weather data simulation"""
    temp = random.randint(18, 38)
    humidity = random.randint(35, 85)
    rainfall = random.randint(0, 15)
    
    return {
        'temperature': temp,
        'humidity': humidity,
        'rainfall': rainfall,
        'wind_speed': random.randint(5, 25),
        'pressure': random.randint(1010, 1025),
        'uv_index': random.randint(1, 11),
        'description': random.choice(['Sunny', 'Partly Cloudy', 'Rainy', 'Cloudy', 'Overcast']),
        'forecast': [
            {'day': 'Today', 'temp': temp, 'humidity': humidity, 'desc': 'Sunny', 'rain': rainfall},
            {'day': 'Tomorrow', 'temp': temp+2, 'humidity': humidity-5, 'desc': 'Cloudy', 'rain': rainfall+2},
            {'day': 'Day 3', 'temp': temp-3, 'humidity': humidity+10, 'desc': 'Rainy', 'rain': rainfall+8},
            {'day': 'Day 4', 'temp': temp+1, 'humidity': humidity-2, 'desc': 'Sunny', 'rain': rainfall-1},
            {'day': 'Day 5', 'temp': temp-1, 'humidity': humidity+3, 'desc': 'Partly Cloudy', 'rain': rainfall+3}
        ]
    }

def get_market_prices():
    """Enhanced market prices with trends"""
    base_prices = {
        'Rice (рдзрд╛рди)': 2100, 'Wheat (рдЧреЗрд╣реВрдВ)': 2050, 'Cotton (рдХрдкрд╛рд╕)': 5800, 
        'Sugarcane (рдЧрдиреНрдирд╛)': 350, 'Onion (рдкреНрдпрд╛рдЬ)': 25, 'Potato (рдЖрд▓реВ)': 18,
        'Tomato (рдЯрдорд╛рдЯрд░)': 35, 'Maize (рдордХреНрдХрд╛)': 1850, 'Soybean (рд╕реЛрдпрд╛рдмреАрди)': 4200
    }
    
    markets = ['APMC Delhi', 'APMC Mumbai', 'APMC Ahmedabad', 'APMC Lucknow', 'APMC Nashik', 'APMC Hyderabad']
    
    prices = []
    for crop, base_price in base_prices.items():
        change_pct = random.randint(-10, 15)
        current_price = base_price + (base_price * change_pct / 100)
        prices.append({
            'crop': crop,
            'price': f'тВ╣{current_price:,.0f}/quintal' if current_price > 100 else f'тВ╣{current_price}/kg',
            'change': f'+{change_pct}%' if change_pct > 0 else f'{change_pct}%',
            'market': random.choice(markets),
            'trend': 'up' if change_pct > 0 else 'down'
        })
    
    return prices

def get_government_schemes():
    """Enhanced government schemes"""
    return [
        {
            'name': 'PM-KISAN (рдкреАрдПрдо-рдХрд┐рд╕рд╛рди)',
            'description': 'тВ╣6,000 annual income support to farmers',
            'eligibility': 'All landholding farmers',
            'benefit': 'тВ╣6,000/year in 3 installments',
            'application': 'Online/CSC/Bank',
            'status': 'Active'
        },
        {
            'name': 'Pradhan Mantri Fasal Bima Yojana',
            'description': 'Comprehensive crop insurance scheme',
            'eligibility': 'All farmers growing notified crops',
            'benefit': 'Up to 90% premium subsidy',
            'application': 'Banks/Insurance companies',
            'status': 'Active'
        },
        {
            'name': 'Kisan Credit Card (KCC)',
            'description': 'Easy credit access for farmers',
            'eligibility': 'Farmers with land records',
            'benefit': 'Low-interest agriculture loans (4% interest)',
            'application': 'Banks/Cooperative societies',
            'status': 'Active'
        },
        {
            'name': 'PM Kisan Samman Nidhi',
            'description': 'Income support for small farmers',
            'eligibility': 'Small and marginal farmers',
            'benefit': 'тВ╣6,000 per year',
            'application': 'Online portal',
            'status': 'Active'
        },
        {
            'name': 'Soil Health Card Scheme',
            'description': 'Soil testing and recommendations',
            'eligibility': 'All farmers',
            'benefit': 'Free soil testing and fertilizer recommendations',
            'application': 'Agriculture offices',
            'status': 'Active'
        }
    ]

def get_crop_recommendations(season, soil_type, location, user_preferences=None):
    """Enhanced crop recommendations"""
    recommendations = {
        'Kharif': {
            'Alluvial': ['Rice', 'Maize', 'Cotton', 'Sugarcane', 'Bajra'],
            'Clay': ['Rice', 'Wheat', 'Cotton', 'Gram'],
            'Sandy': ['Bajra', 'Groundnut', 'Castor', 'Sesame'],
            'Loamy': ['Rice', 'Maize', 'Cotton', 'Sugarcane', 'Soybean'],
            'Black Cotton': ['Cotton', 'Soybean', 'Sunflower', 'Jowar']
        },
        'Rabi': {
            'Alluvial': ['Wheat', 'Barley', 'Gram', 'Mustard', 'Peas'],
            'Clay': ['Wheat', 'Gram', 'Lentil', 'Mustard'],
            'Sandy': ['Barley', 'Gram', 'Mustard', 'Cumin'],
            'Loamy': ['Wheat', 'Barley', 'Gram', 'Mustard', 'Peas'],
            'Black Cotton': ['Wheat', 'Gram', 'Safflower', 'Coriander']
        },
        'Zaid': {
            'Alluvial': ['Watermelon', 'Cucumber', 'Fodder crops', 'Maize'],
            'Clay': ['Fodder crops', 'Vegetables'],
            'Sandy': ['Watermelon', 'Muskmelon', 'Fodder crops'],
            'Loamy': ['Watermelon', 'Cucumber', 'Vegetables', 'Fodder crops'],
            'Black Cotton': ['Fodder crops', 'Vegetables']
        }
    }
    
    base_recommendations = recommendations.get(season, {}).get(soil_type, ['Rice', 'Wheat', 'Cotton'])
    
    return base_recommendations[:5]  # Return top 5 recommendations

def get_farming_tips():
    """Get farming tips based on season and location"""
    tips = [
        "ЁЯМ▒ Start preparing your fields early for better crop yield",
        "ЁЯТз Install drip irrigation system to save 40-60% water",
        "ЁЯРЫ Use neem-based pesticides for organic pest control",
        "ЁЯМ┐ Practice crop rotation to maintain soil health",
        "ЁЯУК Monitor market prices regularly before selling",
        "ЁЯЪЬ Maintain your farm equipment regularly",
        "ЁЯМ╛ Use certified seeds for better germination",
        "ЁЯзк Get soil testing done every 2-3 years",
        "ЁЯУ▒ Use mobile apps for weather updates",
        "ЁЯСе Join farmer producer organizations for better prices"
    ]
    return random.sample(tips, 3)

def get_pest_control_info():
    """Get pest control information"""
    pests = [
        {
            'name': 'Aphids',
            'crops': 'Cotton, Wheat, Mustard',
            'symptoms': 'Yellowing leaves, sticky honeydew',
            'control': 'Neem oil spray, ladybird beetles'
        },
        {
            'name': 'Bollworm',
            'crops': 'Cotton, Tomato',
            'symptoms': 'Holes in fruits/bolls',
            'control': 'Bt cotton, pheromone traps'
        },
        {
            'name': 'Stem Borer',
            'crops': 'Rice, Sugarcane',
            'symptoms': 'Dead hearts, white ears',
            'control': 'Trichogramma release, proper water management'
        }
    ]
    return pests

def get_ai_response(user_input):
    """Generate AI response based on user input"""
    responses = {
        "weather": "The weather in your area is favorable for farming activities with moderate temperatures and expected rainfall.",
        "crop": "Based on your soil type and season, I recommend growing wheat and mustard this season.",
        "price": "Current market prices for wheat are around тВ╣2,050 per quintal with an upward trend.",
        "scheme": "You may be eligible for the PM-KISAN scheme which provides тВ╣6,000 per year to farmers.",
        "pest": "For pest control, consider using neem-based pesticides which are effective and eco-friendly."
    }
    
    if "weather" in user_input.lower():
        return responses["weather"]
    elif "crop" in user_input.lower():
        return responses["crop"]
    elif "price" in user_input.lower():
        return responses["price"]
    elif "scheme" in user_input.lower():
        return responses["scheme"]
    elif "pest" in user_input.lower():
        return responses["pest"]
    else:
        return "I'm here to help with your farming queries. Please ask me about weather, crops, prices, government schemes, or pest control."

# Main Application UI
def main():
    # Header Section
    st.markdown(f"""
    <div class="main-header">
        <h1>{get_text('app_name')}</h1>
        <h3>{get_text('description')}</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Language Selector
    st.sidebar.title("Settings")
    st.session_state.selected_language = st.sidebar.selectbox(
        "Select Language",
        ["English", "Hindi", "Tamil", "Telugu", "Malayalam", "Punjabi"],
        index=["English", "Hindi", "Tamil", "Telugu", "Malayalam", "Punjabi"].index(st.session_state.selected_language)
    )
    
    # Main Tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        get_text('weather'),
        get_text('crop_planning'),
        get_text('market_prices'),
        get_text('govt_schemes'),
        get_text('ai_assistant')
    ])
    
    with tab1:
        # Weather Tab
        st.header(f"ЁЯМжя╕П {get_text('weather')}")
        weather_data = get_weather_data(st.session_state.user_location['city'])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown(f"""
            <div class="weather-card">
                <h3>ЁЯМбя╕П {get_text('temperature')}</h3>
                <h2>{weather_data['temperature']}┬░C</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div class="weather-card">
                <h3>ЁЯТз {get_text('humidity')}</h3>
                <h2>{weather_data['humidity']}%</h2>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown(f"""
            <div class="weather-card">
                <h3>ЁЯМзя╕П {get_text('rainfall')}</h3>
                <h2>{weather_data['rainfall']} mm</h2>
            </div>
            """, unsafe_allow_html=True)
        
        # Weather Forecast Chart
        forecast_df = pd.DataFrame(weather_data['forecast'])
        fig = px.line(forecast_df, x='day', y='temp', title='5-Day Temperature Forecast',
                     labels={'day': 'Day', 'temp': 'Temperature (┬░C)'})
        fig.update_traces(line=dict(width=4))
        st.plotly_chart(fig, use_container_width=True)
        
    with tab2:
        # Crop Planning Tab
        st.header(f"ЁЯМ▒ {get_text('crop_planning')}")
        
        col1, col2 = st.columns(2)
        with col1:
            season = st.selectbox("Select Season", ["Kharif", "Rabi", "Zaid"])
        with col2:
            soil_type = st.selectbox("Select Soil Type", ["Alluvial", "Clay", "Sandy", "Loamy", "Black Cotton"])
        
        recommendations = get_crop_recommendations(season, soil_type, st.session_state.user_location)
        
        st.subheader(f"ЁЯУЛ {get_text('crop_recommendations')}")
        for crop in recommendations:
            st.markdown(f"""
            <div class="feature-card">
                <h3>{crop}</h3>
                <p>Ideal for {season} season in {soil_type} soil conditions</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Farming Tips
        st.subheader("ЁЯТб Farming Tips")
        tips = get_farming_tips()
        for tip in tips:
            st.markdown(f"""
            <div class="info-card">
                <p>{tip}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab3:
        # Market Prices Tab
        st.header(f"ЁЯУК {get_text('market_prices')}")
        prices = get_market_prices()
        
        for price in prices:
            st.markdown(f"""
            <div class="price-card">
                <h3>{price['crop']}</h3>
                <p><strong>Price:</strong> {price['price']} ({price['change']})</p>
                <p><strong>Market:</strong> {price['market']}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab4:
        # Government Schemes Tab
        st.header(f"ЁЯПЫя╕П {get_text('govt_schemes')}")
        schemes = get_government_schemes()
        
        for scheme in schemes:
            st.markdown(f"""
            <div class="scheme-card">
                <h3>{scheme['name']}</h3>
                <p>{scheme['description']}</p>
                <p><strong>Eligibility:</strong> {scheme['eligibility']}</p>
                <p><strong>Benefit:</strong> {scheme['benefit']}</p>
                <p><strong>Status:</strong> {scheme['status']}</p>
            </div>
            """, unsafe_allow_html=True)
    
    with tab5:
        # AI Assistant Tab
        st.header(f"ЁЯдЦ {get_text('ai_assistant')}")
        
        # Chat History
        for message in st.session_state.chat_history:
            if message['role'] == 'user':
                st.markdown(f"""
                <div class="chat-message user-message">
                    <p><strong>You:</strong> {message['content']}</p>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message bot-message">
                    <p><strong>Krishi Assistant:</strong> {message['content']}</p>
                </div>
                """, unsafe_allow_html=True)
        
        # Quick Questions
        # Quick Questions
        st.subheader(get_text('quick_questions'))
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            if st.button(get_text('weather_info')):
                user_input = "Tell me about the weather"
                response = get_ai_response(user_input)
                st.session_state.chat_history.append({'role': 'user', 'content': user_input})
                st.session_state.chat_history.append({'role': 'assistant', 'content': response})
                st.experimental_rerun()

        with col2:
            if st.button(get_text('crop_advice')):
                user_input = "What crops should I grow?"
                response = get_ai_response(user_input)
                st.session_state.chat_history.append({'role': 'user', 'content': user_input})
                st.session_state.chat_history.append({'role': 'assistant', 'content': response})
                st.experimental_rerun()

        with col3:
            if st.button(get_text('price_check')):
                user_input = "What are the current crop prices?"
                response = get_ai_response(user_input)
                st.session_state.chat_history.append({'role': 'user', 'content': user_input})
                st.session_state.chat_history.append({'role': 'assistant', 'content': response})
                st.experimental_rerun()

        with col4:
            if st.button(get_text('scheme_info')):
                user_input = "Tell me about government schemes"
                response = get_ai_response(user_input)
                st.session_state.chat_history.append({'role': 'user', 'content': user_input})
                st.session_state.chat_history.append({'role': 'assistant', 'content': response})
                st.experimental_rerun()

        # Custom user input
        user_input = st.text_input(get_text('ask_question'), key="user_query")
        if st.button(get_text('send')):
            if user_input.strip():
                st.session_state.chat_history.append({'role': 'user', 'content': user_input})
                response = get_ai_response(user_input)
                st.session_state.chat_history.append({'role': 'assistant', 'content': response})
                st.experimental_rerun() 


if __name__ == "__main__":
    main()



  