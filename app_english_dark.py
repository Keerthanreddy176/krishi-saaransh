def main():
    st.write('‚úÖ App started successfully')
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üåæ Krishi Saaransh üåæ</h1>
        <h3>‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü AI ‡§∏‡§π‡§æ‡§Ø‡§ï</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("üåê Language / ‡§≠‡§æ‡§∑‡§æ")
        st.session_state.selected_language = st.selectbox(
            "Select Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:",
            ['English'],
            index=['English'].index(st.session_state.selected_language)
        )
        
        st.header("üìç Location / ‡§∏‡•ç‡§•‡§æ‡§®")
        city = st.text_input("City / ‡§∂‡§π‡§∞:", value=st.session_state.user_location['city'])
        state = st.selectbox("State / ‡§∞‡§æ‡§ú‡•ç‡§Ø:", 
                           ['Delhi', 'Maharashtra', 'Karnataka', 'Tamil Nadu', 'Andhra Pradesh', 
                            'Telangana', 'Kerala', 'Punjab', 'Haryana', 'Uttar Pradesh', 
                            'West Bengal', 'Gujarat', 'Rajasthan', 'Madhya Pradesh', 'Bihar'])
        
        if st.button("Update Location / ‡§∏‡•ç‡§•‡§æ‡§® ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç"):
            st.session_state.user_location = {'city': city, 'state': state}
            st.success(f"Location updated to {city}, {state}")
    
    # Main content tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        f"üå§Ô∏è {get_text('weather')}", 
        f"üå± {get_text('crop_planning')}", 
        f"üí∞ {get_text('market_prices')}", 
        f"üèõÔ∏è {get_text('govt_schemes')}", 
        f"ü§ñ {get_text('ai_assistant')}"
    ])
    
    # Weather Tab
    with tab1:
        st.subheader(f"üå§Ô∏è {get_text('weather')} - {st.session_state.user_location['city']}")
        
        weather_data = get_weather_data(st.session_state.user_location['city'])
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric(f"{get_text('temperature')}", f"{weather_data['temperature']}¬∞C")
        with col2:
            st.metric(f"{get_text('humidity')}", f"{weather_data['humidity']}%")
        with col3:
            st.metric(f"{get_text('rainfall')}", f"{weather_data['rainfall']}mm")
        with col4:
            st.metric("Status", weather_data['description'])
        
        # Weather forecast chart
        forecast_df = pd.DataFrame(weather_data['forecast'])
        fig = px.line(forecast_df, x='day', y='temp', title='5-Day Temperature Forecast',
                     markers=True, line_shape='spline')
        fig.update_layout(height=400)
        st.plotly_chart(fig, use_container_width=True)
        
        # Weather alerts
        if weather_data['rainfall'] > 5:
            st.warning("‚ö†Ô∏è Heavy rainfall expected. Protect your crops!")
        elif weather_data['temperature'] > 35:
            st.warning("üå°Ô∏è High temperature alert. Ensure proper irrigation!")
    
    # Crop Planning Tab
    with tab2:
        st.subheader(f"üå± {get_text('crop_planning')}")
        
        col1, col2 = st.columns(2)
        with col1:
            season = st.selectbox("Season / ‡§Æ‡•å‡§∏‡§Æ:", ['Kharif', 'Rabi', 'Zaid'])
            soil_type = st.selectbox("Soil Type / ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:", 
                                   ['Alluvial', 'Clay', 'Sandy', 'Loamy', 'Black Cotton'])
        
        with col2:
            area = st.number_input("Land Area (acres) / ‡§≠‡•Ç‡§Æ‡§ø ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞:", min_value=0.1, value=1.0)
            irrigation = st.selectbox("Irrigation / ‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à:", ['Rain Fed', 'Drip', 'Sprinkler', 'Flood'])
        
        if st.button(f"Get {get_text('crop_recommendations')} / ‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§™‡§æ‡§è‡§Ç"):
            recommendations = get_crop_recommendations(season, soil_type, st.session_state.user_location['city'])
            
            st.success(f"**Recommended Crops for {season} Season:**")
            for crop in recommendations:
                st.markdown(f"üåæ **{crop}**")
            
            # Create a simple crop planning chart
            crop_data = pd.DataFrame({
                'Crop': recommendations,
                'Expected Yield (tons/acre)': [2.5, 1.8, 3.2, 2.1, 1.5][:len(recommendations)],
                'Market Price (‚Çπ/quintal)': [2100, 5800, 350, 2050, 1800][:len(recommendations)]
            })
            
            fig = px.bar(crop_data, x='Crop', y='Expected Yield (tons/acre)', 
                        title='Expected Yield by Crop')
            st.plotly_chart(fig, use_container_width=True)
    
    # Market Prices Tab
    with tab3:
        st.subheader(f"üí∞ {get_text('market_prices')}")
        
        price_data = get_market_prices()
        
        for item in price_data:
            change_color = "green" if "+" in item['change'] else "red"
            st.markdown(f"""
            <div class="price-card">
                <h4>{item['crop']}</h4>
                <p><strong>Price:</strong> {item['price']}</p>
                <p><strong>Change:</strong> <span style="color: {change_color};">{item['change']}</span></p>
                <p><strong>Market:</strong> {item['market']}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # Price trend chart
        price_trend = pd.DataFrame({
            'Date': pd.date_range(start='2024-01-01', periods=30, freq='D'),
            'Rice Price': [2000 + i*2 + (i%5)*10 for i in range(30)],
            'Wheat Price': [1950 + i*1.5 + (i%3)*8 for i in range(30)]
        })
        
        fig = px.line(price_trend, x='Date', y=['Rice Price', 'Wheat Price'], 
                     title='30-Day Price Trend')
        st.plotly_chart(fig, use_container_width=True)
    
    # Government Schemes Tab
    with tab4:
        st.subheader(f"üèõÔ∏è {get_text('govt_schemes')}")
        
        schemes = get_government_schemes()
        
        for scheme in schemes:
            st.markdown(f"""
            <div class="scheme-card">
                <h4>{scheme['name']}</h4>
                <p><strong>Description:</strong> {scheme['description']}</p>
                <p><strong>Eligibility:</strong> {scheme['eligibility']}</p>
                <p><strong>Benefit:</strong> {scheme['benefit']}</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.info("üí° **Tip:** Visit your nearest CSC (Common Service Center) or bank for scheme registration")
    
    # AI Assistant Tab
    with tab5:
        st.subheader(f"ü§ñ {get_text('ai_assistant')}")
        
        # Display chat history
        for message in st.session_state.chat_history:
            if message['role'] == 'user':
                st.markdown(f"""
                <div class="chat-message user-message">
                    <strong>You:</strong> {message['content']}
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div class="chat-message bot-message">
                    <strong>Krishi AI:</strong> {message['content']}
                </div>
                """, unsafe_allow_html=True)
        
        # Chat input
        with st.form("chat_form", clear_on_submit=True):
            user_input = st.text_area(get_text('ask_question'), height=100,
                                    placeholder="Type your farming question here...")
            submitted = st.form_submit_button(get_text('send'))
            
            if submitted and user_input:
                # Add user message to history
                st.session_state.chat_history.append({
                    'role': 'user',
                    'content': user_input
                })
                
                # Generate AI response
                response = ai_response(user_input, st.session_state.selected_language)
                
                # Add AI response to history
                st.session_state.chat_history.append({
                    'role': 'assistant',
                    'content': response
                })
                
                st.rerun()
        
        # Quick action buttons
        st.markdown("**Quick Questions:**")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("Weather Info / ‡§Æ‡•å‡§∏‡§Æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä"):
                st.session_state.chat_history.append({
                    'role': 'user',
                    'content': 'What is today\'s weather?'
                })
                st.session_state.chat_history.append({
                    'role': 'assistant',
                    'content': ai_response('weather', st.session_state.selected_language)
                })
                st.rerun()
        
        with col2:
            if st.button("Crop Advice / ‡§´‡§∏‡§≤ ‡§∏‡§≤‡§æ‡§π"):
                st.session_state.chat_history.append({
                    'role': 'user',
                    'content': 'What crops should I grow?'
                })
                st.session_state.chat_history.append({
                    'role': 'assistant',
                    'content': ai_response('crop', st.session_state.selected_language)
                })
import streamlit as st
import requests
import json
from datetime import datetime, timedelta
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from geopy.geocoders import Nominatim
import time

# Page configuration
st.set_page_config(
    page_title="Krishi Saaransh",
    page_icon="üåæ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better mobile responsiveness and Indian theme
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #FF9933 0%, #FFFAF0 50%, #138808 100%);
        padding: 2rem;
        border-radius: 10px;
        text-align: center;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .feature-card {
        background: linear-gradient(135deg, #1e3c1e 0%, #2e2f3e 100%);
        padding: 1.5rem;
        border-radius: 15px;
        border-left: 5px solid #138808;
        margin: 1rem 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .weather-card {
        background: linear-gradient(135deg, #1e2b3e 0%, #2f3e4f 100%);
        padding: 1.5rem;
        border-radius: 15px;
        text-align: center;
        margin: 1rem 0;
    }
    
    .price-card {
        background: linear-gradient(135deg, #2e2e2e 0%, #3e3e3e 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #FF9933;
    }
    
    .scheme-card {
        background: linear-gradient(135deg, #2a2a40 0%, #3a3a50 100%);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border-left: 4px solid #4169E1;
    }
    
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
    }
    
    .user-message {
        background-color: #DCF8C6;
        border-left: 4px solid #25D366;
    }
    
    .bot-message {
        background-color: #F1F1F1;
        border-left: 4px solid #128C7E;
    }
    
    @media (max-width: 768px) {
        .main-header {
            padding: 1rem;
            font-size: 0.9rem;
        }
        .feature-card, .weather-card {
            padding: 1rem;
        }
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'chat_history' not in st.session_state:
    st.session_state.chat_history = []
if 'selected_language' not in st.session_state:
    st.session_state.selected_language = 'English'
if 'user_location' not in st.session_state:
    st.session_state.user_location = {'city': 'Delhi', 'state': 'Delhi'}

# Language translations
TRANSLATIONS = {
    'Hindi': {
        'welcome': '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à',
        'app_name': '‡§ï‡•É‡§∑‡§ø ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂ - ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§ï‡§ø‡§∏‡§æ‡§® ‡§∏‡§π‡§æ‡§Ø‡§ï',
        'description': '‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡§ø‡§∏‡§æ‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è AI-‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡•â‡§∞‡•ç‡§Æ',
        'weather': '‡§Æ‡•å‡§∏‡§Æ ‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®',
        'crop_planning': '‡§´‡§∏‡§≤ ‡§Ø‡•ã‡§ú‡§®‡§æ',
        'market_prices': '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
        'govt_schemes': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç',
        'ai_assistant': 'AI ‡§∏‡§π‡§æ‡§Ø‡§ï',
        'location': '‡§∏‡•ç‡§•‡§æ‡§®',
        'temperature': '‡§§‡§æ‡§™‡§Æ‡§æ‡§®',
        'humidity': '‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ',
        'rainfall': '‡§µ‡§∞‡•ç‡§∑‡§æ',
        'crop_recommendations': '‡§´‡§∏‡§≤ ‡§∏‡•Å‡§ù‡§æ‡§µ',
        'ask_question': '‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç',
        'send': '‡§≠‡•á‡§ú‡•á‡§Ç'
    },
    'English': {
        'welcome': 'Welcome',
        'app_name': 'Krishi Saaransh - Smart Farmer Assistant',
        'description': 'AI-Powered Platform for Indian Farmers',
        'weather': 'Weather Forecast',
        'crop_planning': 'Crop Planning',
        'market_prices': 'Market Prices',
        'govt_schemes': 'Government Schemes',
        'ai_assistant': 'AI Assistant',
        'location': 'Location',
        'temperature': 'Temperature',
        'humidity': 'Humidity',
        'rainfall': 'Rainfall',
        'crop_recommendations': 'Crop Recommendations',
        'ask_question': 'Ask your question',
        'send': 'Send'
    },
    'Tamil': {
        'welcome': '‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç',
        'app_name': '‡Æï‡Æø‡Æ∞‡ØÅ‡Æ∑‡Æø ‡Æö‡Ææ‡Æ∞‡Æ©‡Øç‡Æ∑‡Øç - ‡Æ∏‡Øç‡ÆÆ‡Ææ‡Æ∞‡Øç‡Æü‡Øç ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç',
        'description': '‡Æá‡Æ®‡Øç‡Æ§‡Æø‡ÆØ ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æø‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© AI-‡Æá‡ÆØ‡Æô‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æ≥‡ÆÆ‡Øç',
        'weather': '‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡ÆÆ‡ØÅ‡Æ©‡Øç‡Æ©‡Æ±‡Æø‡Æµ‡Æø‡Æ™‡Øç‡Æ™‡ØÅ',
        'crop_planning': '‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Æø‡Æü‡Æ≤‡Øç',
        'market_prices': '‡Æö‡Æ®‡Øç‡Æ§‡Øà ‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øç',
        'govt_schemes': '‡ÆÖ‡Æ∞‡Æö‡ØÅ ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç',
        'ai_assistant': 'AI ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç',
        'location': '‡Æá‡Æü‡ÆÆ‡Øç',
        'temperature': '‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà',
        'humidity': '‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç',
        'rainfall': '‡ÆÆ‡Æ¥‡Øà‡Æ™‡Øç‡Æ™‡Øä‡Æ¥‡Æø‡Æµ‡ØÅ',
        'crop_recommendations': '‡Æ™‡ÆØ‡Æø‡Æ∞‡Øç ‡Æ™‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æ∞‡Øà‡Æï‡Æ≥‡Øç',
        'ask_question': '‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø‡ÆØ‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç',
        'send': '‡ÆÖ‡Æ©‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ'
    },
    'Telugu': {
        'welcome': '‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç',
        'app_name': '‡∞ï‡±É‡∞∑‡∞ø ‡∞∏‡∞æ‡∞∞‡∞æ‡∞Ç‡∞∂‡±ç - ‡∞∏‡±ç‡∞Æ‡∞æ‡∞∞‡±ç‡∞ü‡±ç ‡∞∞‡±à‡∞§‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å',
        'description': '‡∞≠‡∞æ‡∞∞‡∞§‡±Ä‡∞Ø ‡∞∞‡±à‡∞§‡±Å‡∞≤ ‡∞ï‡±ã‡∞∏‡∞Ç AI-‡∞Ü‡∞ß‡∞æ‡∞∞‡∞ø‡∞§ ‡∞™‡±ç‡∞≤‡∞æ‡∞ü‡±ç‚Äå‡∞´‡∞æ‡∞∞‡∞Ç',
        'weather': '‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£ ‡∞∏‡±Ç‡∞ö‡∞®',
        'crop_planning': '‡∞™‡∞Ç‡∞ü ‡∞™‡±ç‡∞∞‡∞£‡∞æ‡∞≥‡∞ø‡∞ï',
        'market_prices': '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ß‡∞∞‡∞≤‡±Å',
        'govt_schemes': '‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞™‡∞•‡∞ï‡∞æ‡∞≤‡±Å',
        'ai_assistant': 'AI ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å',
        'location': '‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç',
        'temperature': '‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§',
        'humidity': '‡∞§‡±á‡∞Æ',
        'rainfall': '‡∞µ‡∞∞‡±ç‡∞∑‡∞™‡∞æ‡∞§‡∞Ç',
        'crop_recommendations': '‡∞™‡∞Ç‡∞ü ‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å‡∞≤‡±Å',
        'ask_question': '‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞® ‡∞Ö‡∞°‡±Å‡∞ó‡∞Ç‡∞°‡∞ø',
        'send': '‡∞™‡∞Ç‡∞™‡±Å'
    },
    'Malayalam': {
        'welcome': '‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç',
        'app_name': '‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥æ‡¥∞‡¥æ‡¥Ç‡¥∂‡µç - ‡¥∏‡µç‡¥Æ‡¥æ‡µº‡¥ü‡µç‡¥ü‡µç ‡¥ï‡µº‡¥∑‡¥ï ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø',
        'description': '‡¥á‡¥®‡µç‡¥§‡µç‡¥Ø‡µª ‡¥ï‡µº‡¥∑‡¥ï‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥≥‡µç‡¥≥ AI-‡¥™‡¥µ‡µá‡µº‡¥°‡µç ‡¥™‡µç‡¥≤‡¥æ‡¥±‡µç‡¥±‡µç‡¥´‡µã‡¥Ç',
        'weather': '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç',
        'crop_planning': '‡¥µ‡¥ø‡¥≥ ‡¥Ü‡¥∏‡µÇ‡¥§‡µç‡¥∞‡¥£‡¥Ç',
        'market_prices': '‡¥Æ‡¥æ‡µº‡¥ï‡µç‡¥ï‡¥±‡µç‡¥±‡µç ‡¥µ‡¥ø‡¥≤‡¥ï‡µæ',
        'govt_schemes': '‡¥∏‡µº‡¥ï‡µç‡¥ï‡¥æ‡µº ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø‡¥ï‡µæ',
        'ai_assistant': 'AI ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø',
        'location': '‡¥∏‡µç‡¥•‡¥≤‡¥Ç',
        'temperature': '‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤',
        'humidity': '‡¥Ü‡µº‡¥¶‡µç‡¥∞‡¥§',
        'rainfall': '‡¥Æ‡¥¥',
        'crop_recommendations': '‡¥µ‡¥ø‡¥≥ ‡¥∂‡µÅ‡¥™‡¥æ‡µº‡¥∂‡¥ï‡µæ',
        'ask_question': '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ö‡µã‡¥¶‡µç‡¥Ø‡¥Ç ‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï',
        'send': '‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï'
    }
}

def get_text(key):
    return TRANSLATIONS[st.session_state.selected_language].get(key, key)

# Sample data functions (In production, these would connect to real APIs)
def get_weather_data(city):
    """Simulate weather data - In production, use OpenWeatherMap API"""
    import random
    return {
        'temperature': random.randint(20, 35),
        'humidity': random.randint(40, 80),
        'rainfall': random.randint(0, 10),
        'description': random.choice(['Sunny', 'Partly Cloudy', 'Rainy', 'Cloudy']),
        'forecast': [
            {'day': 'Today', 'temp': random.randint(20, 35), 'desc': 'Sunny'},
            {'day': 'Tomorrow', 'temp': random.randint(20, 35), 'desc': 'Cloudy'},
            {'day': 'Day 3', 'temp': random.randint(20, 35), 'desc': 'Rainy'},
            {'day': 'Day 4', 'temp': random.randint(20, 35), 'desc': 'Sunny'},
            {'day': 'Day 5', 'temp': random.randint(20, 35), 'desc': 'Partly Cloudy'}
        ]
    }

def get_market_prices():
    """Simulate market prices - In production, use AgriMarket API"""
    return [
        {'crop': 'Rice (‡§ß‡§æ‡§®)', 'price': '‚Çπ2,100/quintal', 'change': '+5%', 'market': 'APMC Delhi'},
        {'crop': 'Wheat (‡§ó‡•á‡§π‡•Ç‡§Ç)', 'price': '‚Çπ2,050/quintal', 'change': '+2%', 'market': 'APMC Mumbai'},
        {'crop': 'Cotton (‡§ï‡§™‡§æ‡§∏)', 'price': '‚Çπ5,800/quintal', 'change': '-3%', 'market': 'APMC Ahmedabad'},
        {'crop': 'Sugarcane (‡§ó‡§®‡•ç‡§®‡§æ)', 'price': '‚Çπ350/quintal', 'change': '+1%', 'market': 'APMC Lucknow'},
        {'crop': 'Onion (‡§™‡•ç‡§Ø‡§æ‡§ú)', 'price': '‚Çπ25/kg', 'change': '+15%', 'market': 'APMC Nashik'}
    ]

def get_government_schemes():
    """Government schemes for farmers"""
    return [
        {
            'name': 'PM-KISAN (‡§™‡•Ä‡§è‡§Æ-‡§ï‡§ø‡§∏‡§æ‡§®)',
            'description': '‚Çπ6,000 annual income support to farmers',
            'eligibility': 'All landholding farmers',
            'benefit': '‚Çπ6,000/year in 3 installments'
        },
        {
            'name': 'Crop Insurance (‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ)',
            'description': 'Pradhan Mantri Fasal Bima Yojana',
            'eligibility': 'All farmers growing notified crops',
            'benefit': 'Compensation for crop loss'
        },
        {
            'name': 'Kisan Credit Card (‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡•ç‡§∞‡•á‡§°‡§ø‡§ü ‡§ï‡§æ‡§∞‡•ç‡§°)',
            'description': 'Easy credit access for farmers',
            'eligibility': 'Farmers with land records',
            'benefit': 'Low-interest agriculture loans'
        },
        {
            'name': 'Soil Health Card (‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§°)',
            'description': 'Soil testing and recommendations',
            'eligibility': 'All farmers',
            'benefit': 'Free soil testing and fertilizer recommendations'
        }
    ]

def get_crop_recommendations(season, soil_type, location):
    """Crop recommendations based on conditions"""
    recommendations = {
        'Kharif': ['Rice', 'Cotton', 'Sugarcane', 'Maize', 'Bajra'],
        'Rabi': ['Wheat', 'Barley', 'Gram', 'Mustard', 'Peas'],
        'Zaid': ['Watermelon', 'Cucumber', 'Fodder crops', 'Sugarcane']
    }
    return recommendations.get(season, ['Rice', 'Wheat', 'Cotton'])

def ai_response(query, language):
    """Simulate AI response - In production, integrate with OpenAI/Gemini API"""
    responses = {
        'Hindi': {
            'weather': '‡§Ü‡§ú ‡§ï‡§æ ‡§Æ‡•å‡§∏‡§Æ ‡§∏‡§æ‡§´ ‡§π‡•à‡•§ ‡§§‡§æ‡§™‡§Æ‡§æ‡§® 28¬∞C ‡§π‡•à ‡§î‡§∞ 70% ‡§Ü‡§∞‡•ç‡§¶‡•ç‡§∞‡§§‡§æ ‡§π‡•à‡•§ ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§¶‡§ø‡§® ‡§π‡•à‡•§',
            'crop': '‡§á‡§∏ ‡§Æ‡•å‡§∏‡§Æ ‡§Æ‡•á‡§Ç ‡§ó‡•á‡§π‡•Ç‡§Ç, ‡§ö‡§®‡§æ ‡§î‡§∞ ‡§∏‡§∞‡§∏‡•ã‡§Ç ‡§ï‡•Ä ‡§¨‡•Å‡§µ‡§æ‡§à ‡§Ö‡§ö‡•ç‡§õ‡•Ä ‡§π‡•ã‡§ó‡•Ä‡•§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§Ç‡§ö ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§',
            'price': '‡§Ü‡§ú ‡§ï‡•á ‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§≠‡§æ‡§µ: ‡§ó‡•á‡§π‡•Ç‡§Ç ‚Çπ2050/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤, ‡§ß‡§æ‡§® ‚Çπ2100/‡§ï‡•ç‡§µ‡§ø‡§Ç‡§ü‡§≤‡•§ ‡§ï‡§≤ ‡§∏‡•á ‡§¶‡§æ‡§Æ ‡§¨‡§¢‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§',
            'scheme': 'PM-KISAN ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§ï‡•á ‡§§‡§π‡§§ ‚Çπ6000 ‡§∏‡§æ‡§≤‡§æ‡§®‡§æ ‡§Æ‡§ø‡§≤‡§§‡§æ ‡§π‡•à‡•§ ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡§æ‡§∞‡•ç‡§° ‡§∏‡•á ‡§∞‡§ú‡§ø‡§∏‡•ç‡§ü‡•ç‡§∞‡•á‡§∂‡§® ‡§ï‡§∞‡§æ‡§è‡§Ç‡•§'
        },
        'English': {
            'weather': 'Today\'s weather is clear with 28¬∞C temperature and 70% humidity. Good day for farming activities.',
            'crop': 'This season is good for wheat, gram, and mustard cultivation. Get your soil tested first.',
            'price': 'Today\'s market rates: Wheat ‚Çπ2050/quintal, Rice ‚Çπ2100/quintal. Prices may rise tomorrow.',
            'scheme': 'Under PM-KISAN scheme, you get ‚Çπ6000 annually. Register with your Aadhaar card.'
        },
        'Tamil': {
            'weather': '‡Æá‡Æ©‡Øç‡Æ±‡Øà‡ÆØ ‡Æµ‡Ææ‡Æ©‡Æø‡Æ≤‡Øà ‡Æ§‡ØÜ‡Æ≥‡Æø‡Æµ‡Ææ‡Æï ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ. ‡Æµ‡ØÜ‡Æ™‡Øç‡Æ™‡Æ®‡Æø‡Æ≤‡Øà 28¬∞C ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç 70% ‡Æà‡Æ∞‡Æ™‡Øç‡Æ™‡Æ§‡ÆÆ‡Øç. ‡Æµ‡Æø‡Æµ‡Æö‡Ææ‡ÆØ‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æ®‡Æ≤‡Øç‡Æ≤ ‡Æ®‡Ææ‡Æ≥‡Øç.',
            'crop': '‡Æá‡Æ®‡Øç‡Æ§ ‡Æ™‡Æ∞‡ØÅ‡Æµ‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øà, ‡Æï‡Æü‡Æ≤‡Øà ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æï‡Æü‡ØÅ‡Æï‡ØÅ ‡Æ™‡ÆØ‡Æø‡Æ∞‡Æø‡Æü‡ØÅ‡Æµ‡Æ§‡ØÅ ‡Æ®‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ. ‡ÆÆ‡ØÅ‡Æ§‡Æ≤‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æ£‡Øç ‡Æ™‡Æ∞‡Æø‡Æö‡Øã‡Æ§‡Æ©‡Øà ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.',
            'price': '‡Æá‡Æ©‡Øç‡Æ±‡Øà‡ÆØ ‡Æö‡Æ®‡Øç‡Æ§‡Øà ‡Æµ‡Æø‡Æ≤‡Øà‡Æï‡Æ≥‡Øç: ‡Æï‡Øã‡Æ§‡ØÅ‡ÆÆ‡Øà ‚Çπ2050/‡Æï‡ØÅ‡Æµ‡Æø‡Æ£‡Øç‡Æü‡Ææ‡Æ≤‡Øç, ‡ÆÖ‡Æ∞‡Æø‡Æö‡Æø ‚Çπ2100/‡Æï‡ØÅ‡Æµ‡Æø‡Æ£‡Øç‡Æü‡Ææ‡Æ≤‡Øç. ‡Æ®‡Ææ‡Æ≥‡Øà ‡Æµ‡Æø‡Æ≤‡Øà ‡Æâ‡ÆØ‡Æ∞‡Æ≤‡Ææ‡ÆÆ‡Øç.',
            'scheme': 'PM-KISAN ‡Æ§‡Æø‡Æü‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æï‡ØÄ‡Æ¥‡Øç ‡ÆÜ‡Æ£‡Øç‡Æü‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‚Çπ6000 ‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç. ‡ÆÜ‡Æ§‡Ææ‡Æ∞‡Øç ‡Æï‡Ææ‡Æ∞‡Øç‡Æü‡ØÅ ‡ÆÆ‡ØÇ‡Æ≤‡ÆÆ‡Øç ‡Æ™‡Æ§‡Æø‡Æµ‡ØÅ ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.'
        },
        'Telugu': {
            'weather': '‡∞®‡±á‡∞ü‡∞ø ‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç ‡∞Æ‡∞Ç‡∞ö‡∞ø‡∞¶‡∞ø. ‡∞â‡∞∑‡±ç‡∞£‡±ã‡∞ó‡±ç‡∞∞‡∞§ 28¬∞C ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å 70% ‡∞§‡±á‡∞Æ ‡∞â‡∞Ç‡∞¶‡∞ø. ‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞Æ‡∞Ç‡∞ö‡∞ø ‡∞∞‡±ã‡∞ú‡±Å.',
            'crop': '‡∞à ‡∞∏‡±Ä‡∞ú‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞ó‡±ã‡∞ß‡±Å‡∞Æ‡∞≤‡±Å, ‡∞∂‡∞®‡∞ó‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ü‡∞µ‡∞æ‡∞≤ ‡∞™‡∞Ç‡∞°‡∞ø‡∞Ç‡∞ö‡∞°‡∞Ç ‡∞Æ‡∞Ç‡∞ö‡∞ø‡∞¶‡∞ø. ‡∞Æ‡±ä‡∞¶‡∞ü ‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø.',
            'price': '‡∞®‡±á‡∞ü‡∞ø ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞∞‡±á‡∞ü‡±ç‡∞≤‡±Å: ‡∞ó‡±ã‡∞ß‡±Å‡∞Æ‡∞≤‡±Å ‚Çπ2050/‡∞ï‡±ç‡∞µ‡∞ø‡∞Ç‡∞ü‡∞≤‡±ç, ‡∞µ‡∞∞‡∞ø ‚Çπ2100/‡∞ï‡±ç‡∞µ‡∞ø‡∞Ç‡∞ü‡∞≤‡±ç. ‡∞∞‡±á‡∞™‡±Å ‡∞ß‡∞∞‡∞≤‡±Å ‡∞™‡±Ü‡∞∞‡±Å‡∞ó‡±Å‡∞§‡∞æ‡∞Ø‡∞ø.',
            'scheme': 'PM-KISAN ‡∞™‡∞•‡∞ï‡∞Ç‡∞≤‡±ã ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‚Çπ6000 ‡∞≤‡∞≠‡∞ø‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø. ‡∞Ü‡∞ß‡∞æ‡∞∞‡±ç ‡∞ï‡∞æ‡∞∞‡±ç‡∞°‡±Å‡∞§‡±ã ‡∞∞‡∞ø‡∞ú‡∞ø‡∞∏‡±ç‡∞ü‡∞∞‡±ç ‡∞ö‡±á‡∞∏‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø.'
        },
        'Malayalam': {
            'weather': '‡¥á‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥• ‡¥µ‡µç‡¥Ø‡¥ï‡µç‡¥§‡¥Æ‡¥æ‡¥£‡µç. ‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤ 28¬∞C ‡¥â‡¥Ç 70% ‡¥Ü‡µº‡¥¶‡µç‡¥∞‡¥§‡¥Ø‡µÅ‡¥Ç ‡¥â‡¥£‡µç‡¥ü‡µç. ‡¥ï‡µÉ‡¥∑‡¥ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µç ‡¥®‡¥≤‡µç‡¥≤ ‡¥¶‡¥ø‡¥µ‡¥∏‡¥Ç.',
            'crop': '‡¥à ‡¥∏‡µÄ‡¥∏‡¥£‡¥ø‡µΩ ‡¥ó‡µã‡¥§‡¥Æ‡µç‡¥™‡µç, ‡¥ö‡µÜ‡¥±‡µÅ‡¥™‡¥Ø‡µº, ‡¥ï‡¥ü‡µÅ‡¥ï‡µç ‡¥é‡¥®‡µç‡¥®‡¥ø‡¥µ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡¥æ‡¥Ç. ‡¥Ü‡¥¶‡µç‡¥Ø‡¥Ç ‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥® ‡¥®‡¥ü‡¥§‡µç‡¥§‡µÅ‡¥ï.',
            'price': '‡¥á‡¥®‡µç‡¥®‡¥§‡µç‡¥§‡µÜ ‡¥µ‡¥ø‡¥™‡¥£‡¥ø ‡¥®‡¥ø‡¥∞‡¥ï‡µç‡¥ï‡µÅ‡¥ï‡µæ: ‡¥ó‡µã‡¥§‡¥Æ‡µç‡¥™‡µç ‚Çπ2050/‡¥ï‡µç‡¥µ‡¥ø‡¥®‡µç‡¥±‡µΩ, ‡¥Ö‡¥∞‡¥ø ‚Çπ2100/‡¥ï‡µç‡¥µ‡¥ø‡¥®‡µç‡¥±‡µΩ. ‡¥®‡¥æ‡¥≥‡µÜ ‡¥µ‡¥ø‡¥≤ ‡¥ï‡µÇ‡¥ü‡¥æ‡¥Ç.',
            'scheme': 'PM-KISAN ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø‡¥Ø‡¥ø‡µΩ ‡¥µ‡µº‡¥∑‡¥§‡µç‡¥§‡¥ø‡µΩ ‚Çπ6000 ‡¥ï‡¥ø‡¥ü‡µç‡¥ü‡µÅ‡¥Ç. ‡¥Ü‡¥ß‡¥æ‡µº ‡¥ï‡¥æ‡µº‡¥°‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥ø‡¥ö‡µç‡¥ö‡µç ‡¥∞‡¥ú‡¥ø‡¥∏‡µç‡¥±‡µç‡¥±‡µº ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï.'
        }
    }
    
    # Simple keyword matching for demo
    query_lower = query.lower()
    lang_responses = responses.get(language, responses['English'])
    
    if any(word in query_lower for word in ['weather', '‡§Æ‡•å‡§∏‡§Æ', '‡§µ‡§æ‡∂≠‡§æ‡§µ‡§∞‡§£', '‡∞µ‡∞æ‡∞§‡∞æ‡∞µ‡∞∞‡∞£‡∞Ç', '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•']):
        return lang_responses['weather']
    elif any(word in query_lower for word in ['crop', '‡§´‡§∏‡§≤', '‡Æ™‡ÆØ‡Æø‡§∞‡Øç', '‡∞™‡∞Ç‡∞ü', '‡¥µ‡¥ø‡¥≥']):
        return lang_responses['crop']
    elif any(word in query_lower for word in ['price', '‡§Æ‡•Ç‡§≤‡•ç‡§Ø', '‡Æµ‡Æø‡Æ≤‡Øà', '‡∞ß‡∞∞', '‡¥µ‡¥ø‡¥≤']):
        return lang_responses['price']
    elif any(word in query_lower for word in ['scheme', '‡§Ø‡•ã‡§ú‡§®‡§æ', '‡Æ§‡Æø‡Æü‡Øç‡Æü‡ÆÆ‡Øç', '‡∞™‡∞•‡∞ï‡∞Ç', '‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø']):
        return lang_responses['scheme']
    else:
        return lang_responses['weather']  # Default response

if __name__ == "__main__":
    main()
